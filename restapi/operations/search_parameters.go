// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
)

// NewSearchParams creates a new SearchParams object
//
// There are no default values defined in the spec.
func NewSearchParams() SearchParams {

	return SearchParams{}
}

// SearchParams contains all the bound params for the search operation
// typically these are obtained from a http.Request
//
// swagger:parameters search
type SearchParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Longest Rush -- a T represents a touchdown occurred
	  In: query
	*/
	Lng *string
	/*player name to search for
	  In: query
	*/
	PlayerName *string
	/*Total Rushing Touchdowns, Longest Rush and Total Rushing Yards
	  In: query
	*/
	Sort *string
	/*Total Rushing Touchdowns
	  In: query
	*/
	Td *string
	/*Total Rushing Yards
	  In: query
	*/
	Yds *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewSearchParams() beforehand.
func (o *SearchParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLng, qhkLng, _ := qs.GetOK("lng")
	if err := o.bindLng(qLng, qhkLng, route.Formats); err != nil {
		res = append(res, err)
	}

	qPlayerName, qhkPlayerName, _ := qs.GetOK("player_name")
	if err := o.bindPlayerName(qPlayerName, qhkPlayerName, route.Formats); err != nil {
		res = append(res, err)
	}

	qSort, qhkSort, _ := qs.GetOK("sort")
	if err := o.bindSort(qSort, qhkSort, route.Formats); err != nil {
		res = append(res, err)
	}

	qTd, qhkTd, _ := qs.GetOK("td")
	if err := o.bindTd(qTd, qhkTd, route.Formats); err != nil {
		res = append(res, err)
	}

	qYds, qhkYds, _ := qs.GetOK("yds")
	if err := o.bindYds(qYds, qhkYds, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLng binds and validates parameter Lng from query.
func (o *SearchParams) bindLng(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Lng = &raw

	return nil
}

// bindPlayerName binds and validates parameter PlayerName from query.
func (o *SearchParams) bindPlayerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PlayerName = &raw

	return nil
}

// bindSort binds and validates parameter Sort from query.
func (o *SearchParams) bindSort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Sort = &raw

	return nil
}

// bindTd binds and validates parameter Td from query.
func (o *SearchParams) bindTd(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Td = &raw

	return nil
}

// bindYds binds and validates parameter Yds from query.
func (o *SearchParams) bindYds(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Yds = &raw

	return nil
}
